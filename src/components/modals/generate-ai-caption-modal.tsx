import { useState } from 'react';
import {
    Dialog,
    DialogHeader,
    DialogClose,
    DialogContent,
    DialogTitle,
    DialogTrigger,
} from '../ui/dialog';
import { Button } from '../ui/button';
import { Sparkle } from 'lucide-react';
import { Badge } from '../ui/badge';
import { useGenerateAICaption } from '@/hooks/usePost';
import { toast } from 'sonner';

const tones = [
    'Friendly and Engaging',
    'Grateful and Heartfelt',
    'Playful and Humorous',
    'Calm and Reflective',
    'Excited and Energetic',
    'Inspiring and Motivational',
    'Casual and Conversational',
    'Professional and Polished',
    'Bold and Confident',
    'Soft and Empathetic',
    'Nostalgic and Sentimental',
    'Cheerful and Upbeat',
    'Mysterious and Intriguing',
    'Hopeful and Uplifting',
    'Honest and Vulnerable',
    'Witty and Sarcastic',
];

type Props = {
    handleChange: (caption: string) => void;
};

export function GenerateAICaptionModal({ handleChange }: Props) {
    const [open, setOpen] = useState<boolean>(false);
    const [selectedTone, setSelectedTone] = useState<string>('');

    const genAICapt = useGenerateAICaption();

    const handleGenerateAICaption = () => {
        genAICapt.mutate(selectedTone, {
            onSuccess: (caption) => {
                handleChange(caption);
                toast.success('Caption generated by AI');
                setOpen(false);
            },
            onError: () => {
                toast.error('Failed generate caption by AI');
            },
        });
    };

    return (
        <Dialog open={open} onOpenChange={setOpen}>
            <DialogTrigger asChild>
                <Button
                    variant="outline"
                    className="flex items-center space-x-2"
                    size="sm">
                    <Sparkle className="w-4 h-4" />
                    <span>AI Caption Helper</span>
                </Button>
            </DialogTrigger>

            <DialogContent className="sm:max-w-md">
                <DialogHeader>
                    <DialogTitle>Generate Caption</DialogTitle>
                </DialogHeader>

                <div className="flex flex-col gap-4 mt-4">
                    <div>
                        <label className="text-sm font-medium mb-2 block">
                            Select Tone
                        </label>
                        <div className="flex flex-wrap gap-2">
                            {tones.map((tone) => (
                                <Badge
                                    key={tone}
                                    variant={
                                        selectedTone === tone
                                            ? 'default'
                                            : 'outline'
                                    }
                                    className="cursor-pointer"
                                    onClick={() => setSelectedTone(tone)}>
                                    {tone}
                                </Badge>
                            ))}
                        </div>
                    </div>

                    <div className="flex item-center gap-4">
                        <Button
                            disabled={!selectedTone || genAICapt.isPending}
                            className="mt-4"
                            onClick={() => {
                                handleGenerateAICaption();
                            }}>
                            {genAICapt.isPending ? 'Generating...' : 'Generate'}
                        </Button>
                        <DialogClose asChild>
                            <Button className="mt-4" variant="destructive">
                                Cancel
                            </Button>
                        </DialogClose>
                    </div>
                </div>
            </DialogContent>
        </Dialog>
    );
}
